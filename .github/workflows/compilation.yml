name: CI

on:
  push:
  pull_request:
  repository_dispatch:
    types: [run_build]

jobs:
  build:
    runs-on: ${{ matrix.os }}
    name: ${{ matrix.os }} (${{ matrix.arch }})
    strategy:
      matrix:
        include:
          - { os: ubuntu-latest, arch: x64 }
          - { os: ubuntu-latest, arch: x86 }
          - { os: macos-latest, arch: x64 }
      fail-fast: false

    steps:
    - uses: actions/checkout@v2

    - name: Install on Ubuntu (shared)
      if: matrix.os == 'ubuntu-latest'
      run: |
        [ "${{matrix.arch}}" == "x86" ] && sudo dpkg --add-architecture i386
        sudo apt-get update
        sudo apt-get -y install autoconf automake bison bzip2 cmake doxygen \
                                flex gettext g++-multilib gcc-multilib git gzip \
                                libtool-bin m4 make patch pkg-config python3 \
                                python3-venv subversion tar tcl texinfo unzip \
                                wget xz-utils

    - name: Install on Ubuntu (x64) and Configure
      if: matrix.os == 'ubuntu-latest' && matrix.arch == 'x64'
      run: |
        sudo apt-get -y install libarchive-dev \
                                libcurl4-openssl-dev libelf-dev libgpgme-dev \
                                libncurses5-dev libreadline-dev libsdl1.2-dev \
                                libssl-dev libusb-dev
        echo "::set-env name=CC::gcc -m64"
        echo "::set-env name=CXX::g++ -m64"

    - name: Install on Ubuntu (x86) and Configure
      if: matrix.os == 'ubuntu-latest' && matrix.arch == 'x86'
      run: |
        sudo apt-get -y install libarchive-dev:i386 libcurl4-openssl-dev:i386 \
                                libelf-dev:i386 libgpgme-dev:i386 \
                                libncurses5-dev:i386 libreadline-dev:i386 \
                                libsdl1.2-dev:i386 libssl-dev:i386 libusb-dev:i386
        echo "::set-env name=CC::gcc -m32"
        echo "::set-env name=CXX::g++ -m32"
        echo "::set-env name=PKG_CONFIG_PATH::/usr/lib/i386-linux-gnu/pkgconfig"

    - name: Install on Mac
      if: matrix.os == 'macOS-latest'
      run: |
        brew update
        brew install autoconf automake bash coreutils cmake curl doxygen gettext \
                     gnu-sed gpgme intltool libarchive libelf libtool libusb \
                     libusb-compat meson ninja openssl pkg-config sdl wget xz

    - name: Runs all stages
      run: |
        export PSPDEV=$PWD/pspdev
        export PATH=$PATH:$PSPDEV/bin
        ./pspdev.sh

    - name: Get short SHA
      id: slug
      run: echo "::set-output name=sha8::$(echo ${GITHUB_SHA} | cut -c1-8)"

    - name: Compress pspdev folder
      run: |
        tar -zcvf pspdev.tar.gz pspdev

    - uses: actions/upload-artifact@v2
      with:
        name: pspdev-${{ steps.slug.outputs.sha8 }}-${{ matrix.os }}-${{ matrix.arch }}
        path: pspdev.tar.gz

    - name: Rename pspdev.tar.gz file
      run: |
        if [ "${{matrix.os}}" == "macOS-latest"]; then
          mv pspdev.tar.gz pspdev-macOS.tar.gz
        elif [ "${{matrix.os}}" == "ubuntu-latest" ]; then
          mv pspdev.tar.gz pspdev-linux-${{ matrix.arch }}.tar.gz
        fi

    - name: Extract tag name
      if: startsWith(github.ref, 'refs/tags/')
      id: tag
      run: echo ::set-output name=VERSION::${GITHUB_REF/refs\/tags\//}

    - name: Release
      if: startsWith(github.ref, 'refs/tags/')
      uses: softprops/action-gh-release@v1
      with:
        files: pspdev-${{ matrix.os }}.tar.gz
        tag_name: ${{ steps.tag.outputs.VERSION }}
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
